{"ast":null,"code":"import _objectSpread from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Nagion/todo-list/src/App.js\";\nimport React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.id = 3;\n    this.state = {\n      input: '',\n      todos: [{\n        id: 0,\n        text: ' 리액트 소개',\n        checked: false\n      }, {\n        id: 1,\n        text: ' 리액트 소개',\n        checked: true\n      }, {\n        id: 2,\n        text: ' 리액트 소개',\n        checked: false\n      }]\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        input: e.target.value // input 의 다음 바뀔 값\n\n      });\n    };\n\n    this.handleCreate = () => {\n      const _this$state = this.state,\n            input = _this$state.input,\n            todos = _this$state.todos;\n      this.setState({\n        input: '',\n        // 인풋 비우고\n        // concat 을 사용하여 배열에 추가\n        todos: todos.concat({\n          id: this.id++,\n          text: input,\n          checked: false\n        })\n      });\n    };\n\n    this.handleKeyPress = e => {\n      // 눌려진 키가 Enter 면 handleCreate 호출\n      if (e.key === 'Enter') {\n        this.handleCreate();\n      }\n    };\n\n    this.handleToggle = id => {\n      const todos = this.state.todos; // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n\n      const index = todos.findIndex(todo => todo.id === id);\n      const selected = todos[index]; // 선택한 객체\n\n      const nextTodos = [...todos]; // 배열을 복사\n      // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n\n      nextTodos[index] = _objectSpread({}, selected, {\n        checked: !selected.checked\n      });\n      this.setState({\n        todos: nextTodos\n      });\n    };\n\n    this.handleRemove = id => {\n      const todos = this.state.todos;\n      this.setState({\n        todos: todos.filter(todo => todo.id !== id)\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          input = _this$state2.input,\n          todos = _this$state2.todos;\n    const handleChange = this.handleChange,\n          handleCreate = this.handleCreate,\n          handleKeyPress = this.handleKeyPress,\n          handleToggle = this.handleToggle,\n          handleRemove = this.handleRemove;\n    return React.createElement(TodoListTemplate, {\n      form: React.createElement(Form, {\n        value: input,\n        onKeyPress: handleKeyPress,\n        onChange: handleChange,\n        onCreate: handleCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(TodoItemList, {\n      todos: todos,\n      onToggle: handleToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Nagion/todo-list/src/App.js"],"names":["React","Component","TodoListTemplate","Form","TodoItemList","App","id","state","input","todos","text","checked","handleChange","e","setState","target","value","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\nclass App extends Component {\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: ' 리액트 소개', checked: false },\n      { id: 1, text: ' 리액트 소개', checked: true },\n      { id: 2, text: ' 리액트 소개', checked: false }\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '', // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      <TodoListTemplate form={(\n        <Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      )}>\n        <TodoItemList todos={todos} onToggle={handleToggle}/>\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}