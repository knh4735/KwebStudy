{"ast":null,"code":"import _objectSpread from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nagion/todo-list/src/App.js\";\nimport React, { useState } from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\nlet id = 3;\n\nconst App = () => {\n  const _useReducer = useReducer(reducer, {\n    input: '',\n    todos: [{\n      id: 0,\n      text: '리액트 소개0',\n      checked: false\n    }, {\n      id: 1,\n      text: '리액트 소개1',\n      checked: true\n    }, {\n      id: 2,\n      text: '리액트 소개2',\n      checked: false\n    }]\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        input = _useState2[0],\n        setInput = _useState2[1];\n\n  const _useState3 = useState([{\n    id: 0,\n    text: ' 리액트 소개',\n    checked: false\n  }, {\n    id: 1,\n    text: ' 리액트 소개',\n    checked: true\n  }, {\n    id: 2,\n    text: ' 리액트 소개',\n    checked: false\n  }]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todos = _useState4[0],\n        setTodos = _useState4[1];\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  };\n\n  const handleKeyPress = e => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if (e.key === 'Enter') {\n      this.handleCreate();\n    }\n  };\n\n  const handleToggle = id => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n\n    nextTodos[index] = _objectSpread({}, selected, {\n      checked: !selected.checked\n    });\n    setTodos(nextTodos);\n  };\n\n  const handleRemove = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return React.createElement(TodoListTemplate, {\n    form: React.createElement(Form, {\n      value: input,\n      onKeyPress: handleKeyPress,\n      onChange: handleChange,\n      onCreate: handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(TodoItemList, {\n    todos: todos,\n    onToggle: handleToggle,\n    onRemove: handleRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Nagion/todo-list/src/App.js"],"names":["React","useState","Form","TodoItemList","TodoListTemplate","id","App","useReducer","reducer","input","todos","text","checked","state","dispatch","setInput","setTodos","handleChange","e","target","value","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\nlet id = 3;\n\nconst App = ()=>{\n  const [state, dispatch] = useReducer(reducer, {\n    input: '',\n    todos: [\n      { id: 0, text: '리액트 소개0', checked: false },\n      { id: 1, text: '리액트 소개1', checked: true },\n      { id: 2, text: '리액트 소개2', checked: false }\n    ]\n  });\n  \n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([\n    { id: 0, text: ' 리액트 소개', checked: false },\n    { id: 1, text: ' 리액트 소개', checked: true },\n    { id: 2, text: ' 리액트 소개', checked: false }\n  ]);\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  }\n\n  const handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  const handleToggle = (id) => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    setTodos(nextTodos);\n  }\n\n  const handleRemove = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <TodoListTemplate form={(\n      <Form \n        value={input}\n        onKeyPress={handleKeyPress}\n        onChange={handleChange}\n        onCreate={handleCreate}\n      />\n    )}>\n      <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove} />\n    </TodoListTemplate>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}