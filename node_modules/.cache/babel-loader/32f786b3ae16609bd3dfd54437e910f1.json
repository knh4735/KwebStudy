{"ast":null,"code":"import _slicedToArray from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nagion/todo-list/src/App.js\";\nimport React, { useState } from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\nlet id = 3;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'changeInput':\n      return {\n        input: action.value\n      };\n\n    case 'addTodo':\n      return {\n        input: '',\n        todos: state.todos.concat({\n          id: id++,\n          text: state.input,\n          checked: false\n        })\n      };\n\n    case 'keyPress':\n      if (action.e.type == 'Enter') dispatch({\n        type: 'addTodo'\n      });\n  }\n};\n\nconst App = () => {\n  const _useReducer = useReducer(reducer, {\n    input: '',\n    todos: [{\n      id: 0,\n      text: '리액트 소개0',\n      checked: false\n    }, {\n      id: 1,\n      text: '리액트 소개1',\n      checked: true\n    }, {\n      id: 2,\n      text: '리액트 소개2',\n      checked: false\n    }]\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n  /*\n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([\n    { id: 0, text: ' 리액트 소개', checked: false },\n    { id: 1, text: ' 리액트 소개', checked: true },\n    { id: 2, text: ' 리액트 소개', checked: false }\n  ]);\n   const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n   const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  }\n   const handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n   const handleToggle = (id) => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n     const nextTodos = [...todos]; // 배열을 복사\n     // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n     setTodos(nextTodos);\n  }\n   const handleRemove = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }*/\n\n\n  return React.createElement(TodoListTemplate, {\n    form: React.createElement(Form, {\n      value: input,\n      onKeyPress: handleKeyPress,\n      onChange: handleChange,\n      onCreate: handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(TodoItemList, {\n    todos: todos,\n    onToggle: handleToggle,\n    onRemove: handleRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Nagion/todo-list/src/App.js"],"names":["React","useState","Form","TodoItemList","TodoListTemplate","id","reducer","state","action","type","input","value","todos","concat","text","checked","e","dispatch","App","useReducer","handleKeyPress","handleChange","handleCreate","handleToggle","handleRemove"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA,IAAIC,EAAE,GAAG,CAAT;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAiB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,aAAL;AACE,aAAO;AAACC,QAAAA,KAAK,EAAEF,MAAM,CAACG;AAAf,OAAP;;AAEF,SAAK,SAAL;AACE,aAAO;AACLD,QAAAA,KAAK,EAAE,EADF;AAELE,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmB;AACxBR,UAAAA,EAAE,EAAEA,EAAE,EADkB;AAExBS,UAAAA,IAAI,EAAEP,KAAK,CAACG,KAFY;AAGxBK,UAAAA,OAAO,EAAE;AAHe,SAAnB;AAFF,OAAP;;AASF,SAAK,UAAL;AACE,UAAGP,MAAM,CAACQ,CAAP,CAASP,IAAT,IAAiB,OAApB,EAA6BQ,QAAQ,CAAC;AACpCR,QAAAA,IAAI,EAAE;AAD8B,OAAD,CAAR;AAfjC;AAmBD,CApBD;;AAsBA,MAAMS,GAAG,GAAG,MAAI;AAAA,sBACYC,UAAU,CAACb,OAAD,EAAU;AAC5CI,IAAAA,KAAK,EAAE,EADqC;AAE5CE,IAAAA,KAAK,EAAE,CACL;AAAEP,MAAAA,EAAE,EAAE,CAAN;AAASS,MAAAA,IAAI,EAAE,SAAf;AAA0BC,MAAAA,OAAO,EAAE;AAAnC,KADK,EAEL;AAAEV,MAAAA,EAAE,EAAE,CAAN;AAASS,MAAAA,IAAI,EAAE,SAAf;AAA0BC,MAAAA,OAAO,EAAE;AAAnC,KAFK,EAGL;AAAEV,MAAAA,EAAE,EAAE,CAAN;AAASS,MAAAA,IAAI,EAAE,SAAf;AAA0BC,MAAAA,OAAO,EAAE;AAAnC,KAHK;AAFqC,GAAV,CADtB;AAAA;AAAA,QACPR,KADO;AAAA,QACAU,QADA;AASd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,SACE,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EACpB,oBAAC,IAAD;AACE,MAAA,KAAK,EAAEP,KADT;AAEE,MAAA,UAAU,EAAEU,cAFd;AAGE,MAAA,QAAQ,EAAEC,YAHZ;AAIE,MAAA,QAAQ,EAAEC,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEV,KAArB;AAA4B,IAAA,QAAQ,EAAEW,YAAtC;AAAoD,IAAA,QAAQ,EAAEC,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAYD,CArED;;AAuEA,eAAeN,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\nlet id = 3;\n\nconst reducer = (state, action)=>{\n  switch(action.type){\n    case 'changeInput': \n      return {input: action.value};\n\n    case 'addTodo':\n      return {\n        input: '',\n        todos: state.todos.concat({\n          id: id++,\n          text: state.input,\n          checked: false\n        })\n      };\n\n    case 'keyPress':\n      if(action.e.type == 'Enter') dispatch({\n        type: 'addTodo'\n      })\n  }\n}\n\nconst App = ()=>{\n  const [state, dispatch] = useReducer(reducer, {\n    input: '',\n    todos: [\n      { id: 0, text: '리액트 소개0', checked: false },\n      { id: 1, text: '리액트 소개1', checked: true },\n      { id: 2, text: '리액트 소개2', checked: false }\n    ]\n  });\n  /*\n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([\n    { id: 0, text: ' 리액트 소개', checked: false },\n    { id: 1, text: ' 리액트 소개', checked: true },\n    { id: 2, text: ' 리액트 소개', checked: false }\n  ]);\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  }\n\n  const handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  const handleToggle = (id) => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    setTodos(nextTodos);\n  }\n\n  const handleRemove = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }*/\n\n  return (\n    <TodoListTemplate form={(\n      <Form \n        value={input}\n        onKeyPress={handleKeyPress}\n        onChange={handleChange}\n        onCreate={handleCreate}\n      />\n    )}>\n      <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove} />\n    </TodoListTemplate>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}