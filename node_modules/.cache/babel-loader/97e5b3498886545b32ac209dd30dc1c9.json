{"ast":null,"code":"import _slicedToArray from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Nagion/todo-list/src/App.js\";\nimport React, { useReducer } from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\nlet id = 3;\n\nconst reducer = (state, action) => {\n  const input = state.input,\n        todos = state.todos;\n\n  switch (action.type) {\n    case 'changeInput':\n      return _objectSpread({}, state, {\n        input: action.e.target.value\n      });\n\n    case 'addTodo':\n      return {\n        input: '',\n        todos: todos.concat({\n          id: id++,\n          text: input,\n          checked: false\n        })\n      };\n\n    case 'keyPress':\n      if (action.e.type == 'Enter') reducer(state, {\n        type: 'addTodo'\n      });\n      break;\n\n    case 'toggleTodo':\n      const index = todos.findIndex(todo => todo.id === action.id);\n      const selected = todos[index]; // 선택한 객체\n\n      const nextTodos = [...todos]; // 배열을 복사\n      // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n\n      nextTodos[index] = _objectSpread({}, selected, {\n        checked: !selected.checked\n      });\n      return _objectSpread({}, state, {\n        todos: nextTodos\n      });\n\n    case 'removeTodo':\n      return _objectSpread({}, state, {\n        todos: todos.filter(todo => todo.id !== id)\n      });\n  }\n};\n\nconst App = () => {\n  const _useReducer = useReducer(reducer, {\n    input: '',\n    todos: [{\n      id: 0,\n      text: '리액트 소개0',\n      checked: false\n    }, {\n      id: 1,\n      text: '리액트 소개1',\n      checked: true\n    }, {\n      id: 2,\n      text: '리액트 소개2',\n      checked: false\n    }]\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n  /*\n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([\n    { id: 0, text: ' 리액트 소개', checked: false },\n    { id: 1, text: ' 리액트 소개', checked: true },\n    { id: 2, text: ' 리액트 소개', checked: false }\n  ]);\n   const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n   const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  }\n   const handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n   const handleToggle = (id) => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n     const nextTodos = [...todos]; // 배열을 복사\n     // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n     setTodos(nextTodos);\n  }\n   const handleRemove = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }*/\n\n\n  return React.createElement(TodoListTemplate, {\n    form: React.createElement(Form, {\n      value: state.input,\n      onKeyPress: e => {\n        dispatch({\n          type: 'keyPress',\n          e: e\n        });\n      },\n      onChange: e => {\n        dispatch({\n          type: 'changeInput',\n          e: e\n        });\n      },\n      onCreate: () => {\n        dispatch({\n          type: 'addTodo'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(TodoItemList, {\n    todos: state.todos,\n    onToggle: id => {\n      dispatch({\n        type: 'toggleTodo',\n        id: id\n      });\n    },\n    onRemove: id => {\n      dispatch({\n        type: 'removeTodo',\n        id: id\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Nagion/todo-list/src/App.js"],"names":["React","useReducer","Form","TodoItemList","TodoListTemplate","id","reducer","state","action","input","todos","type","e","target","value","concat","text","checked","index","findIndex","todo","selected","nextTodos","filter","App","dispatch"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\nlet id = 3;\n\nconst reducer = (state, action)=>{\n  const {input, todos} = state;\n  switch(action.type){\n    case 'changeInput': \n      return {\n        ...state, \n        input: action.e.target.value\n      };\n\n    case 'addTodo':\n      return {\n        input: '',\n        todos: todos.concat({\n          id: id++,\n          text: input,\n          checked: false\n        })\n      };\n\n    case 'keyPress':\n      if(action.e.type == 'Enter')\n        reducer(state, {type: 'addTodo'});\n      break;\n\n    case 'toggleTodo':\n      const index = todos.findIndex(todo => todo.id === action.id);\n      const selected = todos[index]; // 선택한 객체\n  \n      const nextTodos = [...todos]; // 배열을 복사\n  \n      // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n      nextTodos[index] = { \n        ...selected, \n        checked: !selected.checked\n      };\n\n      return {\n        ...state,\n        todos: nextTodos\n      };\n    \n    case 'removeTodo':\n      return {\n        ...state,\n        todos: todos.filter(todo => todo.id !== id)\n      };\n  }\n}\n\nconst App = ()=>{\n  const [state, dispatch] = useReducer(reducer, {\n    input: '',\n    todos: [\n      { id: 0, text: '리액트 소개0', checked: false },\n      { id: 1, text: '리액트 소개1', checked: true },\n      { id: 2, text: '리액트 소개2', checked: false }\n    ]\n  });\n  /*\n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([\n    { id: 0, text: ' 리액트 소개', checked: false },\n    { id: 1, text: ' 리액트 소개', checked: true },\n    { id: 2, text: ' 리액트 소개', checked: false }\n  ]);\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  }\n\n  const handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  const handleToggle = (id) => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    setTodos(nextTodos);\n  }\n\n  const handleRemove = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }*/\n\n  return (\n    <TodoListTemplate form={(\n      <Form \n        value={state.input}\n        onKeyPress={(e)=>{dispatch({\n          type: 'keyPress',\n          e: e\n        })}}\n        onChange={(e)=>{dispatch({\n          type: 'changeInput',\n          e: e\n        })}}\n        onCreate={()=>{dispatch({\n          type: 'addTodo'\n        })}}\n      />\n    )}>\n      <TodoItemList\n        todos={state.todos}\n        onToggle={(id)=>{dispatch({\n          type: 'toggleTodo',\n          id: id\n        })}}\n        onRemove={(id)=>{dispatch({\n          type: 'removeTodo',\n          id: id\n        })}} />\n    </TodoListTemplate>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}