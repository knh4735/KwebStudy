{"ast":null,"code":"import _objectSpread from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nagion/todo-list/src/App.js\";\nimport React, { useState } from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\nconst App = () => {\n  let id = 3; // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        input = _useState2[0],\n        setInput = _useState2[1];\n\n  const _useState3 = useState([{\n    id: 0,\n    text: ' 리액트 소개',\n    checked: false\n  }, {\n    id: 1,\n    text: ' 리액트 소개',\n    checked: true\n  }, {\n    id: 2,\n    text: ' 리액트 소개',\n    checked: false\n  }]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todos = _useState4[0],\n        setTodos = _useState4[1];\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  };\n\n  const handleKeyPress = e => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if (e.key === 'Enter') {\n      this.handleCreate();\n    }\n  };\n\n  const handleToggle = id => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n\n    nextTodos[index] = _objectSpread({}, selected, {\n      checked: !selected.checked\n    });\n    setTodos(nextTodos);\n  };\n\n  const handleRemove = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return React.createElement(TodoListTemplate, {\n    form: React.createElement(Form, {\n      value: input,\n      onKeyPress: handleKeyPress,\n      onChange: handleChange,\n      onCreate: handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(TodoItemList, {\n    todos: todos,\n    onToggle: handleToggle,\n    onRemove: handleRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Nagion/todo-list/src/App.js"],"names":["React","useState","Form","TodoItemList","TodoListTemplate","App","id","input","setInput","text","checked","todos","setTodos","handleChange","e","target","value","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;;AAEA,MAAMC,GAAG,GAAG,MAAI;AACd,MAAIC,EAAE,GAAG,CAAT,CADc,CACH;;AADG,oBAGYL,QAAQ,CAAC,EAAD,CAHpB;AAAA;AAAA,QAGPM,KAHO;AAAA,QAGAC,QAHA;;AAAA,qBAIYP,QAAQ,CAAC,CACjC;AAAEK,IAAAA,EAAE,EAAE,CAAN;AAASG,IAAAA,IAAI,EAAE,SAAf;AAA0BC,IAAAA,OAAO,EAAE;AAAnC,GADiC,EAEjC;AAAEJ,IAAAA,EAAE,EAAE,CAAN;AAASG,IAAAA,IAAI,EAAE,SAAf;AAA0BC,IAAAA,OAAO,EAAE;AAAnC,GAFiC,EAGjC;AAAEJ,IAAAA,EAAE,EAAE,CAAN;AAASG,IAAAA,IAAI,EAAE,SAAf;AAA0BC,IAAAA,OAAO,EAAE;AAAnC,GAHiC,CAAD,CAJpB;AAAA;AAAA,QAIPC,KAJO;AAAA,QAIAC,QAJA;;AAUd,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzBT,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAI,IAAAA,QAAQ,CAACD,KAAK,CAACO,MAAN,CAAa;AACpBZ,MAAAA,EAAE,EAAEA,EAAE,EADc;AAEpBG,MAAAA,IAAI,EAAEF,KAFc;AAGpBG,MAAAA,OAAO,EAAE;AAHW,KAAb,CAAD,CAAR;AAKD,GAPD;;AASA,QAAMS,cAAc,GAAIL,CAAD,IAAO;AAC5B;AACA,QAAGA,CAAC,CAACM,GAAF,KAAU,OAAb,EAAsB;AACpB,WAAKH,YAAL;AACD;AACF,GALD;;AAOA,QAAMI,YAAY,GAAIf,EAAD,IAAQ;AAC3B;AACA,UAAMgB,KAAK,GAAGX,KAAK,CAACY,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAAClB,EAAL,KAAYA,EAApC,CAAd;AACA,UAAMmB,QAAQ,GAAGd,KAAK,CAACW,KAAD,CAAtB,CAH2B,CAGI;;AAE/B,UAAMI,SAAS,GAAG,CAAC,GAAGf,KAAJ,CAAlB,CAL2B,CAKG;AAE9B;;AACAe,IAAAA,SAAS,CAACJ,KAAD,CAAT,qBACKG,QADL;AAEEf,MAAAA,OAAO,EAAE,CAACe,QAAQ,CAACf;AAFrB;AAKAE,IAAAA,QAAQ,CAACc,SAAD,CAAR;AACD,GAdD;;AAgBA,QAAMC,YAAY,GAAIrB,EAAD,IAAQ;AAC3BM,IAAAA,QAAQ,CAACD,KAAK,CAACiB,MAAN,CAAaJ,IAAI,IAAIA,IAAI,CAAClB,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACD,GAFD;;AAIA,SACE,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EACpB,oBAAC,IAAD;AACE,MAAA,KAAK,EAAEC,KADT;AAEE,MAAA,UAAU,EAAEY,cAFd;AAGE,MAAA,QAAQ,EAAEN,YAHZ;AAIE,MAAA,QAAQ,EAAEI,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEN,KAArB;AAA4B,IAAA,QAAQ,EAAEU,YAAtC;AAAoD,IAAA,QAAQ,EAAEM,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAYD,CA9DD;;AAgEA,eAAetB,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\nconst App = ()=>{\n  let id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([\n    { id: 0, text: ' 리액트 소개', checked: false },\n    { id: 1, text: ' 리액트 소개', checked: true },\n    { id: 2, text: ' 리액트 소개', checked: false }\n  ]);\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleCreate = () => {\n    setInput('');\n    setTodos(todos.concat({\n      id: id++,\n      text: input,\n      checked: false\n    }));\n  }\n\n  const handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  const handleToggle = (id) => {\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    setTodos(nextTodos);\n  }\n\n  const handleRemove = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <TodoListTemplate form={(\n      <Form \n        value={input}\n        onKeyPress={handleKeyPress}\n        onChange={handleChange}\n        onCreate={handleCreate}\n      />\n    )}>\n      <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove} />\n    </TodoListTemplate>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}