{"ast":null,"code":"import _objectSpread from \"/Users/Nagion/todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Nagion/todo-list/src/App.js\";\nimport React from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\nconst App = () => {\n  id = 3; // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    todos: [{\n      id: 0,\n      text: ' 리액트 소개',\n      checked: false\n    }, {\n      id: 1,\n      text: ' 리액트 소개',\n      checked: true\n    }, {\n      id: 2,\n      text: ' 리액트 소개',\n      checked: false\n    }]\n  };\n\n  handleChange = e => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n\n    });\n  };\n\n  handleCreate = () => {\n    const _this$state = this.state,\n          input = _this$state.input,\n          todos = _this$state.todos;\n    this.setState({\n      input: '',\n      // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  };\n\n  handleKeyPress = e => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if (e.key === 'Enter') {\n      this.handleCreate();\n    }\n  };\n\n  handleToggle = id => {\n    const todos = this.state.todos; // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n\n    nextTodos[index] = _objectSpread({}, selected, {\n      checked: !selected.checked\n    });\n    this.setState({\n      todos: nextTodos\n    });\n  };\n\n  handleRemove = id => {\n    const todos = this.state.todos;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  };\n\n  const _this$state2 = this.state,\n        input = _this$state2.input,\n        todos = _this$state2.todos;\n  const handleChange = this.handleChange,\n        handleCreate = this.handleCreate,\n        handleKeyPress = this.handleKeyPress,\n        handleToggle = this.handleToggle,\n        handleRemove = this.handleRemove;\n  return React.createElement(TodoListTemplate, {\n    form: React.createElement(Form, {\n      value: input,\n      onKeyPress: handleKeyPress,\n      onChange: handleChange,\n      onCreate: handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(TodoItemList, {\n    todos: todos,\n    onToggle: handleToggle,\n    onRemove: handleRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Nagion/todo-list/src/App.js"],"names":["React","Form","TodoItemList","TodoListTemplate","App","id","state","input","todos","text","checked","handleChange","e","setState","target","value","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;;AAEA,MAAMC,GAAG,GAAG,MAAI;AACdC,EAAAA,EAAE,GAAG,CAAL,CADc,CACP;;AAEPC,EAAAA,KAAK,GAAG;AACNC,IAAAA,KAAK,EAAE,EADD;AAENC,IAAAA,KAAK,EAAE,CACL;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASI,MAAAA,IAAI,EAAE,SAAf;AAA0BC,MAAAA,OAAO,EAAE;AAAnC,KADK,EAEL;AAAEL,MAAAA,EAAE,EAAE,CAAN;AAASI,MAAAA,IAAI,EAAE,SAAf;AAA0BC,MAAAA,OAAO,EAAE;AAAnC,KAFK,EAGL;AAAEL,MAAAA,EAAE,EAAE,CAAN;AAASI,MAAAA,IAAI,EAAE,SAAf;AAA0BC,MAAAA,OAAO,EAAE;AAAnC,KAHK;AAFD,GAAR;;AASAC,EAAAA,YAAY,GAAIC,CAAD,IAAO;AACpB,SAAKC,QAAL,CAAc;AACZN,MAAAA,KAAK,EAAEK,CAAC,CAACE,MAAF,CAASC,KADJ,CACU;;AADV,KAAd;AAGD,GAJD;;AAMAC,EAAAA,YAAY,GAAG,MAAM;AAAA,wBACM,KAAKV,KADX;AAAA,UACXC,KADW,eACXA,KADW;AAAA,UACJC,KADI,eACJA,KADI;AAEnB,SAAKK,QAAL,CAAc;AACZN,MAAAA,KAAK,EAAE,EADK;AACD;AACX;AACAC,MAAAA,KAAK,EAAEA,KAAK,CAACS,MAAN,CAAa;AAClBZ,QAAAA,EAAE,EAAE,KAAKA,EAAL,EADc;AAElBI,QAAAA,IAAI,EAAEF,KAFY;AAGlBG,QAAAA,OAAO,EAAE;AAHS,OAAb;AAHK,KAAd;AASD,GAXD;;AAaAQ,EAAAA,cAAc,GAAIN,CAAD,IAAO;AACtB;AACA,QAAGA,CAAC,CAACO,GAAF,KAAU,OAAb,EAAsB;AACpB,WAAKH,YAAL;AACD;AACF,GALD;;AAOAI,EAAAA,YAAY,GAAIf,EAAD,IAAQ;AAAA,UACbG,KADa,GACH,KAAKF,KADF,CACbE,KADa,EAGrB;;AACA,UAAMa,KAAK,GAAGb,KAAK,CAACc,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAAClB,EAAL,KAAYA,EAApC,CAAd;AACA,UAAMmB,QAAQ,GAAGhB,KAAK,CAACa,KAAD,CAAtB,CALqB,CAKU;;AAE/B,UAAMI,SAAS,GAAG,CAAC,GAAGjB,KAAJ,CAAlB,CAPqB,CAOS;AAE9B;;AACAiB,IAAAA,SAAS,CAACJ,KAAD,CAAT,qBACKG,QADL;AAEEd,MAAAA,OAAO,EAAE,CAACc,QAAQ,CAACd;AAFrB;AAKA,SAAKG,QAAL,CAAc;AACZL,MAAAA,KAAK,EAAEiB;AADK,KAAd;AAGD,GAlBD;;AAoBAC,EAAAA,YAAY,GAAIrB,EAAD,IAAQ;AAAA,UACbG,KADa,GACH,KAAKF,KADF,CACbE,KADa;AAErB,SAAKK,QAAL,CAAc;AACZL,MAAAA,KAAK,EAAEA,KAAK,CAACmB,MAAN,CAAaJ,IAAI,IAAIA,IAAI,CAAClB,EAAL,KAAYA,EAAjC;AADK,KAAd;AAGD,GALD;;AA1Dc,uBAiEW,KAAKC,KAjEhB;AAAA,QAiENC,KAjEM,gBAiENA,KAjEM;AAAA,QAiECC,KAjED,gBAiECA,KAjED;AAAA,QAmEZG,YAnEY,GAwEV,IAxEU,CAmEZA,YAnEY;AAAA,QAoEZK,YApEY,GAwEV,IAxEU,CAoEZA,YApEY;AAAA,QAqEZE,cArEY,GAwEV,IAxEU,CAqEZA,cArEY;AAAA,QAsEZE,YAtEY,GAwEV,IAxEU,CAsEZA,YAtEY;AAAA,QAuEZM,YAvEY,GAwEV,IAxEU,CAuEZA,YAvEY;AA0Ed,SACE,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EACpB,oBAAC,IAAD;AACE,MAAA,KAAK,EAAEnB,KADT;AAEE,MAAA,UAAU,EAAEW,cAFd;AAGE,MAAA,QAAQ,EAAEP,YAHZ;AAIE,MAAA,QAAQ,EAAEK,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAER,KAArB;AAA4B,IAAA,QAAQ,EAAEY,YAAtC;AAAoD,IAAA,QAAQ,EAAEM,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAYD,CAtFD;;AAwFA,eAAetB,GAAf","sourcesContent":["import React from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\nconst App = ()=>{\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n\n  state = {\n    input: '',\n    todos: [\n      { id: 0, text: ' 리액트 소개', checked: false },\n      { id: 1, text: ' 리액트 소개', checked: true },\n      { id: 2, text: ' 리액트 소개', checked: false }\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value // input 의 다음 바뀔 값\n    });\n  }\n\n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '', // 인풋 비우고\n      // concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    // 눌려진 키가 Enter 면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n\n    // 파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index]; // 선택한 객체\n\n    const nextTodos = [...todos]; // 배열을 복사\n\n    // 기존의 값들을 복사하고, checked 값을 덮어쓰기\n    nextTodos[index] = { \n      ...selected, \n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  const { input, todos } = this.state;\n  const {\n    handleChange,\n    handleCreate,\n    handleKeyPress,\n    handleToggle,\n    handleRemove\n  } = this;\n\n  return (\n    <TodoListTemplate form={(\n      <Form \n        value={input}\n        onKeyPress={handleKeyPress}\n        onChange={handleChange}\n        onCreate={handleCreate}\n      />\n    )}>\n      <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove} />\n    </TodoListTemplate>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}